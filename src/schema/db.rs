table! {
    use diesel::sql_types::*;
    #[allow(unused_imports)]//;
    use diesel_citext::sql_types::*;

    /// Representation of the `categories` table.
    ///
    /// (Automatically generated by Diesel.)
    categories (id) {
        /// The `id` column of the `categories` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Int4,
        /// The `category_name` column of the `categories` table.
        ///
        /// Its SQL type is `Citext`.
        ///
        /// (Automatically generated by Diesel.)
        category_name -> Citext,
        /// The `category_description` column of the `categories` table.
        ///
        /// Its SQL type is `Text`.
        ///
        /// (Automatically generated by Diesel.)
        category_description -> Text,
    }
}

table! {
    use diesel::sql_types::*;
    #[allow(unused_imports)]//;
    use diesel_citext::sql_types::*;

    /// Representation of the `challenges` table.
    ///
    /// (Automatically generated by Diesel.)
    challenges (id) {
        /// The `id` column of the `challenges` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Int4,
        /// The `challenge_name` column of the `challenges` table.
        ///
        /// Its SQL type is `Citext`.
        ///
        /// (Automatically generated by Diesel.)
        challenge_name -> Citext,
        /// The `challenge_description` column of the `challenges` table.
        ///
        /// Its SQL type is `Text`.
        ///
        /// (Automatically generated by Diesel.)
        challenge_description -> Text,
        /// The `hints` column of the `challenges` table.
        ///
        /// Its SQL type is `Array<Text>`.
        ///
        /// (Automatically generated by Diesel.)
        hints -> Array<Text>,
        /// The `flag_case_sensitive` column of the `challenges` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        flag_case_sensitive -> Bool,
        /// The `flag` column of the `challenges` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        flag -> Varchar,
        /// The `points` column of the `challenges` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        points -> Int4,
        /// The `category_id` column of the `challenges` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        category_id -> Int4,
    }
}

table! {
    use diesel::sql_types::*;
    #[allow(unused_imports)]//;
    use diesel_citext::sql_types::*;

    /// Representation of the `solves` table.
    ///
    /// (Automatically generated by Diesel.)
    solves (id) {
        /// The `id` column of the `solves` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Int4,
        /// The `challenge_id` column of the `solves` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        challenge_id -> Int4,
        /// The `team_id` column of the `solves` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        team_id -> Int4,
    }
}

table! {
    use diesel::sql_types::*;
    #[allow(unused_imports)]//;
    use diesel_citext::sql_types::*;

    /// Representation of the `teams` table.
    ///
    /// (Automatically generated by Diesel.)
    teams (id) {
        /// The `id` column of the `teams` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Int4,
        /// The `team_name` column of the `teams` table.
        ///
        /// Its SQL type is `Citext`.
        ///
        /// (Automatically generated by Diesel.)
        team_name -> Citext,
        /// The `invite_code_hash` column of the `teams` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        invite_code_hash -> Varchar,
        /// The `points` column of the `teams` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        points -> Int4,
    }
}

table! {
    use diesel::sql_types::*;
    #[allow(unused_imports)]//;
    use diesel_citext::sql_types::*;

    /// Representation of the `users` table.
    ///
    /// (Automatically generated by Diesel.)
    users (id) {
        /// The `id` column of the `users` table.
        ///
        /// Its SQL type is `Int4`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Int4,
        /// The `username` column of the `users` table.
        ///
        /// Its SQL type is `Citext`.
        ///
        /// (Automatically generated by Diesel.)
        username -> Citext,
        /// The `password_hash` column of the `users` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        password_hash -> Varchar,
        /// The `email` column of the `users` table.
        ///
        /// Its SQL type is `Citext`.
        ///
        /// (Automatically generated by Diesel.)
        email -> Citext,
        /// The `email_confirmed` column of the `users` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        email_confirmed -> Bool,
        /// The `admin` column of the `users` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        admin -> Bool,
        /// The `team_id` column of the `users` table.
        ///
        /// Its SQL type is `Nullable<Int4>`.
        ///
        /// (Automatically generated by Diesel.)
        team_id -> Nullable<Int4>,
    }
}

joinable!(challenges -> categories (category_id));
joinable!(solves -> challenges (challenge_id));
joinable!(solves -> teams (team_id));
joinable!(users -> teams (team_id));

allow_tables_to_appear_in_same_query!(
    categories,
    challenges,
    solves,
    teams,
    users,
);
